RLE Iterator We can use runlength encoding ie RLE encode sequence integers runlength encoded array even length encoding indexed for all even encoding tells us number times nonnegative integer value encoding repeated sequence For example sequence arr can be encoded be encoding encoding encoding also valid RLE arr Given runlength encoded array design iterator iterates through it Implement RLEIterator class RLEIteratorint encoded Initializes object with encoded array encoded int nextint Exhausts next elements returns last element exhausted this way If there no element left exhaust return instead Example Input Output Explanation RLEIterator rLEIterator new RLEIterator This maps sequence rLEIteratornext exhausts terms sequence returning remaining sequence now rLEIteratornext exhausts term sequence returning remaining sequence now rLEIteratornext exhausts term sequence returning remaining sequence now rLEIteratornext exhausts terms returning This because first term exhausted was but second term did not exist Since last term exhausted does not exist we return Constraints encodinglength encodinglength even encoding most calls will be made next