Design Text Editor Design text editor with cursor can do following Add text where cursor Delete text from where cursor simulating backspace key Move cursor either left right When deleting text only characters left cursor will be deleted cursor will also remain within actual text cannot be moved beyond it More formally we have cursorposition currentTextlength always holds Implement TextEditor class TextEditor Initializes object with empty text void addTextstring text Appends text where cursor cursor ends right text int deleteTextint Deletes characters left cursor Returns number characters actually deleted string cursorLeftint Moves cursor left times Returns last min len characters left cursor where len number characters left cursor string cursorRightint Moves cursor right times Returns last min len characters left cursor where len number characters left cursor Example Input Output Explanation TextEditor textEditor new TextEditor current text character represents cursor textEditoraddTextleetcode current text leetcode textEditordeleteText return current text leet characters were deleted textEditoraddTextpractice current text leetpractice textEditorcursorRight return etpractice current text leetpractice cursor cannot be moved beyond actual text thus did not move etpractice last characters left cursor textEditorcursorLeft return leet current text leetpractice leet last min characters left cursor textEditordeleteText return current text practice Only characters were deleted textEditorcursorLeft return current text practice cursor cannot be moved beyond actual text thus did not move last min characters left cursor textEditorcursorRight return practi current text practice practi last min characters left cursor Constraints textlength text consists lowercase English letters most calls total will be made addText deleteText cursorLeft cursorRight Followup Could you find solution with time complexity Ok per call