Design Memory Allocator You given integer representing size indexed memory array All memory units initially free You have memory allocator with following functionalities Allocate block size consecutive free memory units assign it id mID Free all memory units with given id mID Note Multiple blocks can be allocated same mID You should free all memory units with mID even if they were allocated different blocks Implement Allocator class Allocatorint Initializes Allocator object with memory array size int allocateint size int mID Find leftmost block size consecutive free memory units allocate it with id mID Return blocks first index If such block does not exist return int freeint mID Free all memory units with id mID Return number memory units you have freed Example Input Output Explanation Allocator loc new Allocator Initialize memory array size All memory units initially free locallocate leftmost blocks first index memory array becomes We return locallocate leftmost blocks first index memory array becomes We return locallocate leftmost blocks first index memory array becomes We return locfree Free all memory units with mID memory array becomes We return since there only unit with mID locallocate leftmost blocks first index memory array becomes We return locallocate leftmost blocks first index memory array becomes We return locallocate leftmost blocks first index memory array becomes We return locfree Free all memory units with mID memory array becomes We return since there units with mID locallocate We can not find any free block with consecutive free memory units so we return locfree Free all memory units with mID memory array remains same since there no memory unit with mID We return Constraints size mID most calls will be made allocate free