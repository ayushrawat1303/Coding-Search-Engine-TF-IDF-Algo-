Parse Lisp Expression You given string expression representing Lisplike expression return integer value syntax for these expressions given as follows expression either integer let expression add expression mult expression assigned variable Expressions always evaluate single integer integer could be positive negative let expression takes form let vn en expr where let always string let then there one more pairs alternating variables expressions meaning first variable assigned value expression second variable assigned value expression so on sequentially then value this let expression value expression expr add expression takes form add where add always string add there always two expressions result addition evaluation evaluation mult expression takes form mult where mult always string mult there always two expressions result multiplication evaluation evaluation For this question we will use smaller subset variable names variable starts with lowercase letter then zero more lowercase letters digits Additionally for your convenience names add let mult protected will never be used as variable names Finally there concept scope When expression variable name evaluated within context evaluation innermost scope terms parentheses checked first for value variable then outer scopes checked sequentially It guaranteed every expression legal Please see examples for more details on scope Example Input expression let mult let add Output Explanation expression add when checking for value variable we check from innermost scope outermost context variable we trying evaluate Since found first value Example Input expression let Output Explanation Assignment let statements processed sequentially Example Input expression let add add Output Explanation first add evaluates as assigned second add evaluates as Constraints expressionlength There no leading trailing spaces expression All tokens separated by single space expression answer all intermediate calculations answer guaranteed fit bit integer expression guaranteed be legal evaluate integer