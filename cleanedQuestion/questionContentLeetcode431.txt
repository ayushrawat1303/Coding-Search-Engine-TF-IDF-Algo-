Design Linked List Design your implementation linked list You can choose use singly doubly linked list node singly linked list should have two attributes val next val value current node next pointerreference next node If you want use doubly linked list you will need one more attribute prev indicate previous node linked list Assume all nodes linked list indexed Implement MyLinkedList class MyLinkedList Initializes MyLinkedList object int getint index Get value indexth node linked list If index invalid return void addAtHeadint val Add node value val before first element linked list After insertion new node will be first node linked list void addAtTailint val Append node value val as last element linked list void addAtIndexint index int val Add node value val before indexth node linked list If index equals length linked list node will be appended end linked list If index greater than length node will not be inserted void deleteAtIndexint index Delete indexth node linked list if index valid Example Input Output Explanation MyLinkedList myLinkedList new MyLinkedList myLinkedListaddAtHead myLinkedListaddAtTail myLinkedListaddAtIndex linked list becomes myLinkedListget return myLinkedListdeleteAtIndex now linked list myLinkedListget return Constraints index val Please do not use builtin LinkedList library most calls will be made get addAtHead addAtTail addAtIndex deleteAtIndex